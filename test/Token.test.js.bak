import {tokens, EVM_REVERT} from "../helpers";

const Token = artifacts.require('./Token');

require('chai')
.use(require('chai-as-promised'))
.should()

contract('Token', ([deployer, receiver]) => {
   
    const name="INToken";
    const symbol="IN";
    const decimals="18";
    const totalSupply= tokens(1000000).toString();
 let token;
 
    beforeEach(async()=>{
        //fetch token from blockchain
        token = await Token.new();
    })

    describe('deployment',() => {

        it('tracks the name', async () => {
            //read the token name
            const result = await token.name()
            //check if its equal to "Token Name"
            result.should.equal(name) 
        })

        it('tracks the symbol', async ()=> {
            const result  = await token.symbol()
            result.should.equal(symbol)
        })

        it('tracks the decimals', async ()=> {
            const result  = await token.decimals()
            result.toString().should.equal(decimals)
            //result.should.equal(decimals)
        })

        it('tracks the total supply', async ()=> {
            const result  = await token.totalSupply();
            result.toString().should.equal(totalSupply.toString())
            //result.should.equal(totalSupply)
        })

        it('assigns the total supply to the deployer', async ()=> {
            const result = await token.balanceOf(deployer)
            result.toString().should.equal(totalSupply.toString())
        })
    })

    describe('sending tokens', ()=> {

        let result
        let amount
       
        describe('success', async() => {

            beforeEach(async()=> {
                amount = tokens(100)
                result = await token.transfer(receiver, amount, {from: deployer})
            })
    
            it('transfers token balances', async() =>{
                let balanceOf;
    
                //before transfer
                balanceOf = await token.balanceOf(deployer)
                console.log("balance of deployer before transfer: ", balanceOf.toString())
                balanceOf = await token.balanceOf(receiver)
                console.log("balance of receiver before transfer: ", balanceOf.toString())
                
                //transfer
                await token.transfer(receiver, tokens(100), {from: deployer})
    
                //after transfer
                balanceOf = await token.balanceOf(deployer)
                balanceOf.toString().should.equal(tokens(999900).toString())
                console.log("balance of deployer after transfer: ", balanceOf.toString())
                balanceOf = await token.balanceOf(receiver)
                balanceOf.toString().should.equal(tokens(100).toString())
                console.log("balance of receiver after transfer: ", balanceOf.toString())
            })
    
            it('emits a transfer event', async() =>{
                console.log(result);
            })
    
        })

        describe('failure', async() => {
            
            beforeEach(async()=> {
                amount = tokens(100)
                result = await token.transfer(receiver, amount, {from: deployer})
            })
    
            it('rejects insufficient balances', async() =>{
                let invalidAmount
                invalidAmount = tokens(10)  //greater than total supply, hence invalid
                await token.transfer(deployer, invalidAmount, {from: deployer}).should.be.rejectedWith(EVM_REVERT);
            })

            it('rejects an invalid recipient', async() => {
                await token.transfer(0x0, amount, { from: deployer }).should.be.rejected;
            })

    
        })

    })
})